{"version":3,"sources":["effect.js"],"names":["_gameCanvas","require","_interactive","document","dateCompile","toLocaleDateString","console","setTimeout","querySelector","classList","add","nowDate","Date","now","hasClass","visualPage","viewChange","addEventListener","loadPage","contains","log","box_eventTime","remove","hambAnimate","toggle","e","window","bonuce_animate","openEffect","moveBox","header_addClass","offBtn","floatWrap","box_fixedHeight","offsetHeight","pin_height","isKey","now_scroll","pin_result","ptCanvas","ctx","getContext","innerWidth","textFloat","loadEffect","growTree","darkSkyStarlight","isClick","alert","particleEffect","floatBtn","gameInstance","game","width","height","innerHeight","Interac","turnOffLight","fallenSnow","stickyText","textScreen"],"mappings":"aAAA,IAAAA,YAAAC,QAAA,mBACAC,aAAAD,QAAA,oBAuBAE,SAAMC,iBAAoBC,mBAA1B,WACAC,OAAAC,WAAA,WATQJ,SAASK,cAAc,YAAYC,UAAUC,IAAI,YAMzD,IAAMC,QAAUC,KAAKC,MAabC,MAAJ,IAAcF,KAAAD,SACVI,YAAWN,MAAUC,qBAM5B,SAAAM,aAZG,IAcGC,EAAAA,SAAPT,cAAuC,YACnCQ,EAAUb,SAAAK,cAAA,eAIdM,EAAAI,EAAAT,UAAAU,SAAA,QACAL,GACIX,EAASK,UAAcE,IAAA,UAI3BJ,QAAAc,IAAAN,IACAC,EAASM,UAAiBC,OAAA,UAN1B,SAASC,cAiBTF,SAAab,cAET,aAAAC,UAAAe,OAAA,YAUJ,SAAAH,gBACAlB,SAAAc,iBAAA,mBAAA,SAAAQ,GACAC,OAAAnB,WAAA,WACAJ,SAAAK,cAAA,iBAAAC,UAAAC,IAAA,YACAgB,OAAAnB,WAAA,WAEAJ,SAAAK,cAAA,iBAAAC,UAAAa,OAAA,aACA,MACA,OAjBA,SAASK,kBA0BT,SAASC,aAgCL,IAAAC,EAASC,SAAmBtB,cAAA,iBACxBL,EAAQc,iBAAe,YAAUR,SAAAA,GACpCH,QAAAc,IAAA,KA9BGS,EAAQpB,UAAUC,IAAI,cAgCtBP,EAAQc,iBAAe,aAAUR,SAAAA,GACpCH,QAAAc,IAAA,KA7BGS,EAAQpB,UAAUa,OAAO,cAnEzBhB,QAAAA,IAAQc,aAuBJM,OAAAA,iBAAmB,OAAA,WACfvB,eA8BhBkB,gBAiBAlB,SAASc,iBAAiB,mBAAqBW,YAoC/CG,SAAOd,iBAAiB,SAAU,SAAAQ,GA9B9B,IAgCOO,EAAUvB,OAAUU,QAF/Bc,EAAA9B,SAAAK,cAAA,UAAA0B,aAAA,IASAC,EAAsBhC,SAAAK,cAAA,UAAA0B,aAEdE,EAAJD,GADU1B,EAAc,GAIpB4B,EAAAD,EAQA9B,SAAY8B,cAAZ,UAAA3B,UAAAa,OAAA,gBAVJnB,SAAAK,cAAA,UAAAC,UAAAC,IAAA,gBAaAJ,QAAAc,IAECkB,GAELhC,QAAAc,IAAAa,KAIA,IAAMM,SAAWpC,SAASK,cAAc,oBAClCgC,OAAMD,SAASE,cAArB,qBACAF,UAAApC,SAAwBuC,cAAxB,eAoBA,SAAAC,YA7CIX,UAAUvB,UAAUC,IAAI,eA8CxBkC,IAAAA,GAAU,EACdtC,OAAAW,iBAAuB4B,UAAvB,SAAApB,GACQL,IAAIwB,EAAU,GACdxB,GAAIwB,EACJxB,EAAIwB,KAAAA,EAAWE,KAEf1B,QAAIwB,IAAAA,KA3CRlB,OAAOT,iBAAiB,QAAU,SAAAQ,GAC9BW,GAAQ,EAER9B,QAAQc,IAAIgB,KAepBL,OAAIgB,iBAAJ,QAAA,WACAR,UAAStB,UAAAA,OAAiB,eApCfe,UAAUvB,UAAUU,SAAS,gBAsCxC6B,MAASC,qBAOTC,SAAIC,iBAAmBC,QAAAA,WAdvB,IAAMb,SAAWpC,SAASK,cAAc,WAClCgC,IAAMD,SAASE,WAAW,MAChCF,SAASc,MAAQ3B,OAAOgB,WACxBH,SAASe,OAAS5B,OAAO6B,YACzB,IAAIR,SAAU,EAGd,SAASE,kBAFTV,SAAStB,iBAAiB,QAAUgC,gBASpC,IAAIE,aAAe,IAAIC,YAAAA,KACvB9C,QAAQc,IAAI+B,cAQZ,IAAIP,WAAa,IAAIY,aAAAA,QACrBlD,QAAQc,IAAIwB,WAAWC,YACvBvC,QAAQc,IAAIwB,WAAWa,gBACvBnD,QAAQc,IAAIwB,WAAWc,cACvBpD,QAAQc,IAAIwB,WAAWE,oBACvBxC,QAAQc,IAAIwB,WAAWe,cACvBrD,QAAQc,IAAIwB,WAAWgB","file":"effect.min.js","sourcesContent":["import {game} from \"./gameCanvas.js\"\r\nimport { Interac } from \"./interactive.js\"\r\n\r\n\r\n// import * as module from \"./gameCanvas.js\"\r\n\r\n// window.addEventListener('load' , () => {\r\n//     window.setTimeout( () => {\r\n//         document.querySelector('.loading').classList.add('fade') ;\r\n//     } , 1000)\r\n// })\r\n\r\n\r\n// 아래는 DOM 컨텐츠 로드되면 실행 / 위의 주석은 지정한 타임 지나면 자동 실행\r\ndocument.addEventListener('DOMContentLoaded' , () => {\r\n    window.setTimeout( ()=> {\r\n        document.querySelector('.loading').classList.add('fade')\r\n    })\r\n})\r\n\r\n\r\n// 날짜 가져오기\r\nconst nowDate = Date.now();\r\nconst today = new Date(nowDate);\r\nconst dateCompile = today.toLocaleDateString()\r\nconsole.log(dateCompile)\r\n\r\n\r\n//  로딩 페이지 클래스 감지\r\nfunction viewChange ( ) {\r\n    const isLoad = true;\r\n    const loadPage = document.querySelector('.loading')\r\n    const visualPage = document.querySelector('.after_load')\r\n    const hasClass = loadPage.classList.contains('fade')\r\n\r\n    if (hasClass) {\r\n        visualPage.classList.add('active')\r\n        console.log(hasClass)\r\n    }\r\n    else {\r\n        visualPage.classList.remove('active')\r\n    }\r\n}\r\n\r\nwindow.addEventListener('load' , () => {\r\n    viewChange()\r\n})\r\n\r\n\r\n// 햄버거 클래스 토글\r\nfunction hambAnimate () {\r\n    document.querySelector('.hambuger').classList.toggle('act_hamb')\r\n}\r\n\r\n\r\n// 하단 카테고리 박스 이벤트 + 이펙트 / 돔 컨텐츠 로드 후 2초 지나면 하단 카테고리 생성 후 다시 숨기기\r\nfunction box_eventTime () {\r\n    document.addEventListener('DOMContentLoaded' , e => {\r\n        window.setTimeout( () => {\r\n            document.querySelector('.category_box').classList.add('move_box')\r\n            window.setTimeout( () => {\r\n                document.querySelector('.category_box').classList.remove('move_box')\r\n            }, 5000)\r\n        }, 2000)\r\n    })\r\n}\r\n\r\nbox_eventTime()\r\n\r\n    //  카테고리 박스 하위 요소 애니메이션\r\nfunction bonuce_animate () {\r\n\r\n}\r\n\r\n\r\n// 비동기 처리 방식으로 바꿈. 제이쿼리 $(function()) 을 써도 되지만 자바스크립트로 처리해보고 싶었음\r\n\r\n// function openEffect ()  {\r\n//     const moveBox = document.querySelector('.category_box');\r\n//     moveBox.addEventListener('mouseover' , async (e) => {\r\n//         await doSomethingAsync();\r\n//         console.log('a')\r\n//     })\r\n// }\r\n\r\n// async function doSomethingAsync() {\r\n//     return new Promise((resolve) => {\r\n//         setTimeout(() => {\r\n//             resolve();\r\n//         }, 1000)\r\n//     });\r\n// }\r\n\r\n// openEffect()\r\n\r\n\r\nfunction openEffect () {\r\n    const moveBox = document.querySelector('.category_box');\r\n    moveBox.addEventListener('mouseover' , e => {\r\n        console.log('a')\r\n        moveBox.classList.add('open_box')\r\n    })\r\n    moveBox.addEventListener('mouseleave' , e => {\r\n        console.log('b')\r\n        moveBox.classList.remove('open_box')\r\n    })\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded' , openEffect)\r\n\r\n\r\n//  헤더 현재 스크롤 위치 이벤트\r\ndocument.addEventListener('scroll' , e => {\r\n    // 다 만들고 isFixed 이용해서 리팩토링 하기\r\n    let isFixed = false ;\r\n    let now_scroll = window.scrollY\r\n\r\n    // 하단 카테고리 박스가 어느 위치에서 나올지 위치 값\r\n    const box_fixedHeight = document.querySelector(\"header\").offsetHeight + 600;\r\n\r\n    // 헤더의 높이 값\r\n    let pin_height = document.querySelector(\"header\").offsetHeight;\r\n    let minus_ele = pin_height - 1\r\n    let pin_result = pin_height - minus_ele\r\n\r\n\r\n    pin_result > now_scroll ? header_removeClass() : header_addClass()\r\n\r\n    function header_addClass () {\r\n        document.querySelector('header').classList.add('fixed_header')\r\n    }\r\n    function header_removeClass () {\r\n        document.querySelector('header').classList.remove('fixed_header')\r\n    }\r\n\r\n    console.log(pin_result)\r\n    console.log(box_fixedHeight)\r\n})\r\n\r\n// 키보드에서 글자 입력하면 absolute로 플로팅 처리해서 위로 띄우기 -> 해당 코드 완성되면 입력했던 키가 엔터키를 누르기 전까지는 배열로 들어가서 합쳐지도록 만들기 될란지는;\r\nlet floatBtn = document.querySelector('.float_effect_on') ;\r\nlet offBtn = document.querySelector('.float_effect_off') ;\r\nlet floatWrap = document.querySelector('#float_wrap')\r\n\r\noffBtn.addEventListener('click' , () => {\r\n    floatWrap.classList.remove('floating_on')\r\n    if ( !(floatWrap.classList.contains('floating_on')) ) {\r\n        alert ( '글자 효과가 제거되었습니다!' )\r\n    }\r\n});\r\n\r\nfloatBtn.addEventListener('click' , textFloat) ;\r\n\r\nfunction textFloat () {\r\n    floatWrap.classList.add('floating_on')\r\n    let isKey = false;\r\n    window.addEventListener('keydown' , e => {\r\n        let textArr = [] ;\r\n        isKey = true ;\r\n        textArr.push(e.key)\r\n\r\n        console.log(textArr)\r\n    })\r\n    window.addEventListener('keyup' , e => {\r\n        isKey = false ;\r\n\r\n        console.log(isKey)\r\n    })\r\n\r\n    if ( isKey ) {\r\n\r\n    }\r\n}\r\n// console.log(floatBtn) -- 확인용\r\n\r\n\r\n// 홈페이지 효과용 Canvas\r\nconst ptCanvas = document.querySelector('#canvas')\r\nconst ctx = ptCanvas.getContext('2d')\r\nptCanvas.width = window.innerWidth;\r\nptCanvas.height = window.innerHeight;\r\nlet isClick = false;\r\nptCanvas.addEventListener('click' , particleEffect)\r\n\r\nfunction particleEffect () {\r\n\r\n}\r\n\r\n\r\n// Game Canvas 불러오기\r\n// 확인용\r\nlet gameInstance = new game()\r\nconsole.log(gameInstance)\r\n\r\n// console.log(module.gmSetting())\r\n\r\n\r\n\r\n\r\n// 인터렉티브 효과들 import 하기\r\nlet loadEffect = new Interac\r\nconsole.log(loadEffect.growTree())\r\nconsole.log(loadEffect.turnOffLight())\r\nconsole.log(loadEffect.fallenSnow())\r\nconsole.log(loadEffect.darkSkyStarlight())\r\nconsole.log(loadEffect.stickyText())\r\nconsole.log(loadEffect.textScreen())"]}